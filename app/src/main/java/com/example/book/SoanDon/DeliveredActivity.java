package com.example.book.SoanDon;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.CheckBox;import android.widget.ListView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import com.example.book.R;import com.example.book.SoanDon.Object.Product_Cart;import com.example.book.SoanDon.adapter.ClickNhanTien;import com.example.book.SoanDon.adapter.DeliveredAdapter;import com.example.book.SoanDon.models.Delivered;import com.example.book.SoanDon.models.User;import com.example.book.SoanDon.models.Voucher;import com.example.book.ThuKho.TKQuanLiSanPham.Product;import com.example.book.XuLyHD.DonHangChoXuLy.Bill;import com.google.firebase.database.ChildEventListener;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import java.util.ArrayList;import java.util.UUID;public class DeliveredActivity extends AppCompatActivity {    ArrayList<Bill> list = new ArrayList<>();    DeliveredAdapter adapter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.packager_delivered_layout);        ListView listView = (ListView) findViewById(R.id.listDelivered);        // setTitle("Đã đóng gói");        adapter = new DeliveredAdapter(this, R.layout.packager_delivered_items, list, new ClickNhanTien() {            @Override            public boolean ClickNhanTien(Bill bill) {                // Do nothing but close the dialog                DatabaseReference mDatabase = FirebaseDatabase.getInstance().getReference();                mDatabase.child("bills").child(bill.getId()).child("status").setValue(7);                // Cộng tiền cho user và tặng voucher khi đủ điểm                /* Hạng thành viên                 * 0 : Đồng                 * 1tr: Bạc                 * 5tr: Vàng                 * 10tr: Kim cương                 * */                /*                 * Tặng voucher:                 * Đơn hàng có giá trị:                 * 1tr: 10k                 * 2tr: 50k                 * 5tr: 500k                 * */                // tặng voucher:                int tongTienBill = bill.getTotalMoney() - bill.getDiscount();                if (tongTienBill >= 5000000) {                    Voucher voucher = new Voucher(UUID.randomUUID().toString(), 500000);                    mDatabase.child("vouchers").child(bill.getId_user()).child(voucher.getId()).setValue(voucher);                } else if (tongTienBill >= 2000000) {                    Voucher voucher = new Voucher(UUID.randomUUID().toString(), 50000);                    mDatabase.child("vouchers").child(bill.getId_user()).child(voucher.getId()).setValue(voucher);                } else if (tongTienBill >= 1000000) {                    Voucher voucher = new Voucher(UUID.randomUUID().toString(), 10000);                    mDatabase.child("vouchers").child(bill.getId_user()).child(voucher.getId()).setValue(voucher);                }                // cong tiền user và tặng voucher:                mDatabase.child("users").addChildEventListener(new ChildEventListener() {                    @Override                    public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                        if (snapshot.getKey().equals(bill.getId_user())) {                            User user = snapshot.getValue(User.class);                            int tongTienMua = user.getMoneyBuy() + bill.getTotalMoney() - bill.getDiscount();                            // cọng tiền và hạng thành viên:                            DatabaseReference mDatabasetotal = FirebaseDatabase.getInstance().getReference();                            mDatabasetotal.child("users").child(bill.getId_user()).child("moneyBuy").setValue(tongTienMua);                            if (tongTienMua < 1000000) {                                mDatabasetotal.child("users").child(bill.getId_user()).child("rank").setValue("Đồng");                            } else if (tongTienMua < 5000000) {                                mDatabasetotal.child("users").child(bill.getId_user()).child("rank").setValue("Bạc");                            } else if (tongTienMua < 10000000) {                                mDatabasetotal.child("users").child(bill.getId_user()).child("rank").setValue("Kim cương");                            }                        }                    }                    @Override                    public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                    }                    @Override                    public void onChildRemoved(@NonNull DataSnapshot snapshot) {                    }                    @Override                    public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                    }                    @Override                    public void onCancelled(@NonNull DatabaseError error) {                    }                });                // set lại sản phẩm đó là đã bán bao nhiêu:                mDatabase.child("bill_detail").child(bill.getId()).addChildEventListener(new ChildEventListener() {                    @Override                    public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                        Product_Cart productCart = snapshot.getValue(Product_Cart.class);                        String id__ = snapshot.getKey();                        DatabaseReference mData = FirebaseDatabase.getInstance().getReference("products");                        mData.addChildEventListener(new ChildEventListener() {                            @Override                            public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                                Product product = snapshot.getValue(Product.class);                                if (product.getId().equals(id__)) {                                    int sold = productCart.getQuality() + product.getSold();                                    FirebaseDatabase.getInstance().getReference("products").child(product.getId())                                            .child("sold").setValue(sold);                                    int stock = product.getStock() - productCart.getQuality();                                    FirebaseDatabase.getInstance().getReference("products").child(product.getId())                                            .child("stock").setValue(stock);                                }                            }                            @Override                            public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                            }                            @Override                            public void onChildRemoved(@NonNull DataSnapshot snapshot) {                            }                            @Override                            public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                            }                            @Override                            public void onCancelled(@NonNull DatabaseError error) {                            }                        });                    }                    @Override                    public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                    }                    @Override                    public void onChildRemoved(@NonNull DataSnapshot snapshot) {                    }                    @Override                    public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                    }                    @Override                    public void onCancelled(@NonNull DatabaseError error) {                    }                });                return true;            }        });        listView.setAdapter(adapter);        getDataInDatabase();        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {//                Intent intent = new Intent(getApplicationContext(), PackagedActivityShipper.class);//                intent.putExtra("id_bill", list.get(position));//                startActivity(intent);            }        });        // toolbarr        Toolbar toolbar = findViewById(R.id.toobar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_baseline_arrow_back_24);        toolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });    }    private void getDataInDatabase() {        DatabaseReference mDatabase = FirebaseDatabase.getInstance().getReference();        mDatabase.child("bills").addChildEventListener(new ChildEventListener() {            @Override            public void onChildAdded(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                Bill bill = snapshot.getValue(Bill.class);                if (bill.getStatus() == 6) {                    list.add(bill);                    adapter.notifyDataSetChanged();                }            }            @Override            public void onChildChanged(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {                String key = snapshot.getKey();                try {                    Thread.sleep(700);                } catch (InterruptedException e) {                    e.printStackTrace();                }                for (int j = 0; j < list.size(); j++) {                    if (list.get(j).getId().equals(key)) {                        list.remove(j);                        adapter.notifyDataSetChanged();                    }                }            }            @Override            public void onChildRemoved(@NonNull DataSnapshot snapshot) {            }            @Override            public void onChildMoved(@NonNull DataSnapshot snapshot, @Nullable String previousChildName) {            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });    }}